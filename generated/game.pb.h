// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
class ClientUpdate;
struct ClientUpdateDefaultTypeInternal;
extern ClientUpdateDefaultTypeInternal _ClientUpdate_default_instance_;
class Hello;
struct HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class StatePacket;
struct StatePacketDefaultTypeInternal;
extern StatePacketDefaultTypeInternal _StatePacket_default_instance_;
class Welcome;
struct WelcomeDefaultTypeInternal;
extern WelcomeDefaultTypeInternal _Welcome_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientUpdate* Arena::CreateMaybeMessage<::ClientUpdate>(Arena*);
template<> ::Hello* Arena::CreateMaybeMessage<::Hello>(Arena*);
template<> ::Packet* Arena::CreateMaybeMessage<::Packet>(Arena*);
template<> ::Ping* Arena::CreateMaybeMessage<::Ping>(Arena*);
template<> ::Player* Arena::CreateMaybeMessage<::Player>(Arena*);
template<> ::StatePacket* Arena::CreateMaybeMessage<::StatePacket>(Arena*);
template<> ::Welcome* Arena::CreateMaybeMessage<::Welcome>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GameState : int {
  UNKNOWN = 0,
  WAITING = 1,
  STARTED = 2,
  ENDED = 3,
  GameState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GameState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GameState_IsValid(int value);
constexpr GameState GameState_MIN = UNKNOWN;
constexpr GameState GameState_MAX = ENDED;
constexpr int GameState_ARRAYSIZE = GameState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_descriptor();
template<typename T>
inline const std::string& GameState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameState_descriptor(), enum_t_value);
}
inline bool GameState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState>(
    GameState_descriptor(), name, value);
}
// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Hello final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Hello) */ {
 public:
  inline Hello() : Hello(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Hello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hello(const Hello& from);
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hello& operator=(Hello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hello& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(Hello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hello* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Hello& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Hello& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hello";
  }
  protected:
  explicit Hello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  ~Ping() override;
  explicit PROTOBUF_CONSTEXPR Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping& from) {
    Ping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class ClientUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientUpdate) */ {
 public:
  inline ClientUpdate() : ClientUpdate(nullptr) {}
  ~ClientUpdate() override;
  explicit PROTOBUF_CONSTEXPR ClientUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUpdate(const ClientUpdate& from);
  ClientUpdate(ClientUpdate&& from) noexcept
    : ClientUpdate() {
    *this = ::std::move(from);
  }

  inline ClientUpdate& operator=(const ClientUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUpdate& operator=(ClientUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUpdate* internal_default_instance() {
    return reinterpret_cast<const ClientUpdate*>(
               &_ClientUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientUpdate& a, ClientUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientUpdate& from) {
    ClientUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientUpdate";
  }
  protected:
  explicit ClientUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ClientUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Welcome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Welcome) */ {
 public:
  inline Welcome() : Welcome(nullptr) {}
  ~Welcome() override;
  explicit PROTOBUF_CONSTEXPR Welcome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Welcome(const Welcome& from);
  Welcome(Welcome&& from) noexcept
    : Welcome() {
    *this = ::std::move(from);
  }

  inline Welcome& operator=(const Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline Welcome& operator=(Welcome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Welcome& default_instance() {
    return *internal_default_instance();
  }
  static inline const Welcome* internal_default_instance() {
    return reinterpret_cast<const Welcome*>(
               &_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Welcome& a, Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(Welcome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Welcome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Welcome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Welcome& from) {
    Welcome::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Welcome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Welcome";
  }
  protected:
  explicit Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatePacket) */ {
 public:
  inline StatePacket() : StatePacket(nullptr) {}
  ~StatePacket() override;
  explicit PROTOBUF_CONSTEXPR StatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatePacket(const StatePacket& from);
  StatePacket(StatePacket&& from) noexcept
    : StatePacket() {
    *this = ::std::move(from);
  }

  inline StatePacket& operator=(const StatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatePacket& operator=(StatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatePacket* internal_default_instance() {
    return reinterpret_cast<const StatePacket*>(
               &_StatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StatePacket& a, StatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(StatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatePacket& from) {
    StatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatePacket";
  }
  protected:
  explicit StatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kStateFieldNumber = 1,
    kTickFieldNumber = 2,
  };
  // repeated .Player players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
      mutable_players();
  private:
  const ::Player& _internal_players(int index) const;
  ::Player* _internal_add_players();
  public:
  const ::Player& players(int index) const;
  ::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
      players() const;

  // .GameState state = 1;
  void clear_state();
  ::GameState state() const;
  void set_state(::GameState value);
  private:
  ::GameState _internal_state() const;
  void _internal_set_state(::GameState value);
  public:

  // int32 tick = 2;
  void clear_tick();
  int32_t tick() const;
  void set_tick(int32_t value);
  private:
  int32_t _internal_tick() const;
  void _internal_set_tick(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player > players_;
    int state_;
    int32_t tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kHello = 1,
    kPing = 2,
    kClientUpdate = 3,
    kWelcome = 4,
    kStatePacket = 5,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 1,
    kPingFieldNumber = 2,
    kClientUpdateFieldNumber = 3,
    kWelcomeFieldNumber = 4,
    kStatePacketFieldNumber = 5,
  };
  // .Hello hello = 1;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const ::Hello& hello() const;
  PROTOBUF_NODISCARD ::Hello* release_hello();
  ::Hello* mutable_hello();
  void set_allocated_hello(::Hello* hello);
  private:
  const ::Hello& _internal_hello() const;
  ::Hello* _internal_mutable_hello();
  public:
  void unsafe_arena_set_allocated_hello(
      ::Hello* hello);
  ::Hello* unsafe_arena_release_hello();

  // .Ping ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::Ping& ping() const;
  PROTOBUF_NODISCARD ::Ping* release_ping();
  ::Ping* mutable_ping();
  void set_allocated_ping(::Ping* ping);
  private:
  const ::Ping& _internal_ping() const;
  ::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::Ping* ping);
  ::Ping* unsafe_arena_release_ping();

  // .ClientUpdate client_update = 3;
  bool has_client_update() const;
  private:
  bool _internal_has_client_update() const;
  public:
  void clear_client_update();
  const ::ClientUpdate& client_update() const;
  PROTOBUF_NODISCARD ::ClientUpdate* release_client_update();
  ::ClientUpdate* mutable_client_update();
  void set_allocated_client_update(::ClientUpdate* client_update);
  private:
  const ::ClientUpdate& _internal_client_update() const;
  ::ClientUpdate* _internal_mutable_client_update();
  public:
  void unsafe_arena_set_allocated_client_update(
      ::ClientUpdate* client_update);
  ::ClientUpdate* unsafe_arena_release_client_update();

  // .Welcome welcome = 4;
  bool has_welcome() const;
  private:
  bool _internal_has_welcome() const;
  public:
  void clear_welcome();
  const ::Welcome& welcome() const;
  PROTOBUF_NODISCARD ::Welcome* release_welcome();
  ::Welcome* mutable_welcome();
  void set_allocated_welcome(::Welcome* welcome);
  private:
  const ::Welcome& _internal_welcome() const;
  ::Welcome* _internal_mutable_welcome();
  public:
  void unsafe_arena_set_allocated_welcome(
      ::Welcome* welcome);
  ::Welcome* unsafe_arena_release_welcome();

  // .StatePacket state_packet = 5;
  bool has_state_packet() const;
  private:
  bool _internal_has_state_packet() const;
  public:
  void clear_state_packet();
  const ::StatePacket& state_packet() const;
  PROTOBUF_NODISCARD ::StatePacket* release_state_packet();
  ::StatePacket* mutable_state_packet();
  void set_allocated_state_packet(::StatePacket* state_packet);
  private:
  const ::StatePacket& _internal_state_packet() const;
  ::StatePacket* _internal_mutable_state_packet();
  public:
  void unsafe_arena_set_allocated_state_packet(
      ::StatePacket* state_packet);
  ::StatePacket* unsafe_arena_release_state_packet();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:Packet)
 private:
  class _Internal;
  void set_has_hello();
  void set_has_ping();
  void set_has_client_update();
  void set_has_welcome();
  void set_has_state_packet();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Hello* hello_;
      ::Ping* ping_;
      ::ClientUpdate* client_update_;
      ::Welcome* welcome_;
      ::StatePacket* state_packet_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// int32 id = 1;
inline void Player::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Player::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Player::id() const {
  // @@protoc_insertion_point(field_get:Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Player::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Player.id)
}

// int32 x = 2;
inline void Player::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Player::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Player::x() const {
  // @@protoc_insertion_point(field_get:Player.x)
  return _internal_x();
}
inline void Player::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Player::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Player.x)
}

// int32 y = 3;
inline void Player::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Player::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Player::y() const {
  // @@protoc_insertion_point(field_get:Player.y)
  return _internal_y();
}
inline void Player::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Player::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Player.y)
}

// -------------------------------------------------------------------

// Hello

// -------------------------------------------------------------------

// Ping

// int32 id = 1;
inline void Ping::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Ping::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Ping::id() const {
  // @@protoc_insertion_point(field_get:Ping.id)
  return _internal_id();
}
inline void Ping::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Ping::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Ping.id)
}

// -------------------------------------------------------------------

// ClientUpdate

// int32 id = 1;
inline void ClientUpdate::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ClientUpdate::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ClientUpdate::id() const {
  // @@protoc_insertion_point(field_get:ClientUpdate.id)
  return _internal_id();
}
inline void ClientUpdate::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ClientUpdate::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientUpdate.id)
}

// int32 x = 2;
inline void ClientUpdate::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t ClientUpdate::_internal_x() const {
  return _impl_.x_;
}
inline int32_t ClientUpdate::x() const {
  // @@protoc_insertion_point(field_get:ClientUpdate.x)
  return _internal_x();
}
inline void ClientUpdate::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void ClientUpdate::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ClientUpdate.x)
}

// int32 y = 3;
inline void ClientUpdate::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t ClientUpdate::_internal_y() const {
  return _impl_.y_;
}
inline int32_t ClientUpdate::y() const {
  // @@protoc_insertion_point(field_get:ClientUpdate.y)
  return _internal_y();
}
inline void ClientUpdate::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void ClientUpdate::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ClientUpdate.y)
}

// -------------------------------------------------------------------

// Welcome

// int32 id = 1;
inline void Welcome::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Welcome::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Welcome::id() const {
  // @@protoc_insertion_point(field_get:Welcome.id)
  return _internal_id();
}
inline void Welcome::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Welcome::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Welcome.id)
}

// -------------------------------------------------------------------

// StatePacket

// .GameState state = 1;
inline void StatePacket::clear_state() {
  _impl_.state_ = 0;
}
inline ::GameState StatePacket::_internal_state() const {
  return static_cast< ::GameState >(_impl_.state_);
}
inline ::GameState StatePacket::state() const {
  // @@protoc_insertion_point(field_get:StatePacket.state)
  return _internal_state();
}
inline void StatePacket::_internal_set_state(::GameState value) {
  
  _impl_.state_ = value;
}
inline void StatePacket::set_state(::GameState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:StatePacket.state)
}

// int32 tick = 2;
inline void StatePacket::clear_tick() {
  _impl_.tick_ = 0;
}
inline int32_t StatePacket::_internal_tick() const {
  return _impl_.tick_;
}
inline int32_t StatePacket::tick() const {
  // @@protoc_insertion_point(field_get:StatePacket.tick)
  return _internal_tick();
}
inline void StatePacket::_internal_set_tick(int32_t value) {
  
  _impl_.tick_ = value;
}
inline void StatePacket::set_tick(int32_t value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:StatePacket.tick)
}

// repeated .Player players = 3;
inline int StatePacket::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int StatePacket::players_size() const {
  return _internal_players_size();
}
inline void StatePacket::clear_players() {
  _impl_.players_.Clear();
}
inline ::Player* StatePacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:StatePacket.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >*
StatePacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:StatePacket.players)
  return &_impl_.players_;
}
inline const ::Player& StatePacket::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Player& StatePacket::players(int index) const {
  // @@protoc_insertion_point(field_get:StatePacket.players)
  return _internal_players(index);
}
inline ::Player* StatePacket::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Player* StatePacket::add_players() {
  ::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:StatePacket.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Player >&
StatePacket::players() const {
  // @@protoc_insertion_point(field_list:StatePacket.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// Packet

// .Hello hello = 1;
inline bool Packet::_internal_has_hello() const {
  return payload_case() == kHello;
}
inline bool Packet::has_hello() const {
  return _internal_has_hello();
}
inline void Packet::set_has_hello() {
  _impl_._oneof_case_[0] = kHello;
}
inline void Packet::clear_hello() {
  if (_internal_has_hello()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.hello_;
    }
    clear_has_payload();
  }
}
inline ::Hello* Packet::release_hello() {
  // @@protoc_insertion_point(field_release:Packet.hello)
  if (_internal_has_hello()) {
    clear_has_payload();
    ::Hello* temp = _impl_.payload_.hello_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Hello& Packet::_internal_hello() const {
  return _internal_has_hello()
      ? *_impl_.payload_.hello_
      : reinterpret_cast< ::Hello&>(::_Hello_default_instance_);
}
inline const ::Hello& Packet::hello() const {
  // @@protoc_insertion_point(field_get:Packet.hello)
  return _internal_hello();
}
inline ::Hello* Packet::unsafe_arena_release_hello() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.hello)
  if (_internal_has_hello()) {
    clear_has_payload();
    ::Hello* temp = _impl_.payload_.hello_;
    _impl_.payload_.hello_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_hello(::Hello* hello) {
  clear_payload();
  if (hello) {
    set_has_hello();
    _impl_.payload_.hello_ = hello;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.hello)
}
inline ::Hello* Packet::_internal_mutable_hello() {
  if (!_internal_has_hello()) {
    clear_payload();
    set_has_hello();
    _impl_.payload_.hello_ = CreateMaybeMessage< ::Hello >(GetArenaForAllocation());
  }
  return _impl_.payload_.hello_;
}
inline ::Hello* Packet::mutable_hello() {
  ::Hello* _msg = _internal_mutable_hello();
  // @@protoc_insertion_point(field_mutable:Packet.hello)
  return _msg;
}

// .Ping ping = 2;
inline bool Packet::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline bool Packet::has_ping() const {
  return _internal_has_ping();
}
inline void Packet::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline void Packet::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.ping_;
    }
    clear_has_payload();
  }
}
inline ::Ping* Packet::release_ping() {
  // @@protoc_insertion_point(field_release:Packet.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::Ping* temp = _impl_.payload_.ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Ping& Packet::_internal_ping() const {
  return _internal_has_ping()
      ? *_impl_.payload_.ping_
      : reinterpret_cast< ::Ping&>(::_Ping_default_instance_);
}
inline const ::Ping& Packet::ping() const {
  // @@protoc_insertion_point(field_get:Packet.ping)
  return _internal_ping();
}
inline ::Ping* Packet::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.ping)
  if (_internal_has_ping()) {
    clear_has_payload();
    ::Ping* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_ping(::Ping* ping) {
  clear_payload();
  if (ping) {
    set_has_ping();
    _impl_.payload_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.ping)
}
inline ::Ping* Packet::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ = CreateMaybeMessage< ::Ping >(GetArenaForAllocation());
  }
  return _impl_.payload_.ping_;
}
inline ::Ping* Packet::mutable_ping() {
  ::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:Packet.ping)
  return _msg;
}

// .ClientUpdate client_update = 3;
inline bool Packet::_internal_has_client_update() const {
  return payload_case() == kClientUpdate;
}
inline bool Packet::has_client_update() const {
  return _internal_has_client_update();
}
inline void Packet::set_has_client_update() {
  _impl_._oneof_case_[0] = kClientUpdate;
}
inline void Packet::clear_client_update() {
  if (_internal_has_client_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.client_update_;
    }
    clear_has_payload();
  }
}
inline ::ClientUpdate* Packet::release_client_update() {
  // @@protoc_insertion_point(field_release:Packet.client_update)
  if (_internal_has_client_update()) {
    clear_has_payload();
    ::ClientUpdate* temp = _impl_.payload_.client_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.client_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientUpdate& Packet::_internal_client_update() const {
  return _internal_has_client_update()
      ? *_impl_.payload_.client_update_
      : reinterpret_cast< ::ClientUpdate&>(::_ClientUpdate_default_instance_);
}
inline const ::ClientUpdate& Packet::client_update() const {
  // @@protoc_insertion_point(field_get:Packet.client_update)
  return _internal_client_update();
}
inline ::ClientUpdate* Packet::unsafe_arena_release_client_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.client_update)
  if (_internal_has_client_update()) {
    clear_has_payload();
    ::ClientUpdate* temp = _impl_.payload_.client_update_;
    _impl_.payload_.client_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_client_update(::ClientUpdate* client_update) {
  clear_payload();
  if (client_update) {
    set_has_client_update();
    _impl_.payload_.client_update_ = client_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.client_update)
}
inline ::ClientUpdate* Packet::_internal_mutable_client_update() {
  if (!_internal_has_client_update()) {
    clear_payload();
    set_has_client_update();
    _impl_.payload_.client_update_ = CreateMaybeMessage< ::ClientUpdate >(GetArenaForAllocation());
  }
  return _impl_.payload_.client_update_;
}
inline ::ClientUpdate* Packet::mutable_client_update() {
  ::ClientUpdate* _msg = _internal_mutable_client_update();
  // @@protoc_insertion_point(field_mutable:Packet.client_update)
  return _msg;
}

// .Welcome welcome = 4;
inline bool Packet::_internal_has_welcome() const {
  return payload_case() == kWelcome;
}
inline bool Packet::has_welcome() const {
  return _internal_has_welcome();
}
inline void Packet::set_has_welcome() {
  _impl_._oneof_case_[0] = kWelcome;
}
inline void Packet::clear_welcome() {
  if (_internal_has_welcome()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.welcome_;
    }
    clear_has_payload();
  }
}
inline ::Welcome* Packet::release_welcome() {
  // @@protoc_insertion_point(field_release:Packet.welcome)
  if (_internal_has_welcome()) {
    clear_has_payload();
    ::Welcome* temp = _impl_.payload_.welcome_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Welcome& Packet::_internal_welcome() const {
  return _internal_has_welcome()
      ? *_impl_.payload_.welcome_
      : reinterpret_cast< ::Welcome&>(::_Welcome_default_instance_);
}
inline const ::Welcome& Packet::welcome() const {
  // @@protoc_insertion_point(field_get:Packet.welcome)
  return _internal_welcome();
}
inline ::Welcome* Packet::unsafe_arena_release_welcome() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.welcome)
  if (_internal_has_welcome()) {
    clear_has_payload();
    ::Welcome* temp = _impl_.payload_.welcome_;
    _impl_.payload_.welcome_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_welcome(::Welcome* welcome) {
  clear_payload();
  if (welcome) {
    set_has_welcome();
    _impl_.payload_.welcome_ = welcome;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.welcome)
}
inline ::Welcome* Packet::_internal_mutable_welcome() {
  if (!_internal_has_welcome()) {
    clear_payload();
    set_has_welcome();
    _impl_.payload_.welcome_ = CreateMaybeMessage< ::Welcome >(GetArenaForAllocation());
  }
  return _impl_.payload_.welcome_;
}
inline ::Welcome* Packet::mutable_welcome() {
  ::Welcome* _msg = _internal_mutable_welcome();
  // @@protoc_insertion_point(field_mutable:Packet.welcome)
  return _msg;
}

// .StatePacket state_packet = 5;
inline bool Packet::_internal_has_state_packet() const {
  return payload_case() == kStatePacket;
}
inline bool Packet::has_state_packet() const {
  return _internal_has_state_packet();
}
inline void Packet::set_has_state_packet() {
  _impl_._oneof_case_[0] = kStatePacket;
}
inline void Packet::clear_state_packet() {
  if (_internal_has_state_packet()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.state_packet_;
    }
    clear_has_payload();
  }
}
inline ::StatePacket* Packet::release_state_packet() {
  // @@protoc_insertion_point(field_release:Packet.state_packet)
  if (_internal_has_state_packet()) {
    clear_has_payload();
    ::StatePacket* temp = _impl_.payload_.state_packet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.state_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StatePacket& Packet::_internal_state_packet() const {
  return _internal_has_state_packet()
      ? *_impl_.payload_.state_packet_
      : reinterpret_cast< ::StatePacket&>(::_StatePacket_default_instance_);
}
inline const ::StatePacket& Packet::state_packet() const {
  // @@protoc_insertion_point(field_get:Packet.state_packet)
  return _internal_state_packet();
}
inline ::StatePacket* Packet::unsafe_arena_release_state_packet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Packet.state_packet)
  if (_internal_has_state_packet()) {
    clear_has_payload();
    ::StatePacket* temp = _impl_.payload_.state_packet_;
    _impl_.payload_.state_packet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_state_packet(::StatePacket* state_packet) {
  clear_payload();
  if (state_packet) {
    set_has_state_packet();
    _impl_.payload_.state_packet_ = state_packet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Packet.state_packet)
}
inline ::StatePacket* Packet::_internal_mutable_state_packet() {
  if (!_internal_has_state_packet()) {
    clear_payload();
    set_has_state_packet();
    _impl_.payload_.state_packet_ = CreateMaybeMessage< ::StatePacket >(GetArenaForAllocation());
  }
  return _impl_.payload_.state_packet_;
}
inline ::StatePacket* Packet::mutable_state_packet() {
  ::StatePacket* _msg = _internal_mutable_state_packet();
  // @@protoc_insertion_point(field_mutable:Packet.state_packet)
  return _msg;
}

inline bool Packet::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Packet::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Packet::PayloadCase Packet::payload_case() const {
  return Packet::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState>() {
  return ::GameState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
